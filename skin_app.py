print("–ù–∞—á–∞–ª–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è skin_app.py")
import streamlit as st
import json
import os
from datetime import datetime
import uuid
import spacy
import pandas as pd
import gdown
from PIL import Image
import base64
from utils import list_to_text, custom_tokenizer
from model_deploy import SkincareModel
from pdf import generate_pdf_report

print("–ò–º–ø–æ—Ä—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã, —Å–æ–∑–¥–∞—ë–º SkincareModel...")

# ==================== –ö–û–ù–°–¢–ê–ù–¢–´ ====================
SKIN_TYPES = ['–ù–æ—Ä–º–∞–ª—å–Ω–∞—è', '–°—É—Ö–∞—è', '–ñ–∏—Ä–Ω–∞—è', '–ù–µ —É–≤–µ—Ä–µ–Ω(–∞)']
AGE_RANGES = ['18-25', '25-35', '35-45', '45+']
EFFECTS = ["–£–≤–ª–∞–∂–Ω–µ–Ω–∏–µ", "–õ–∏—Ñ—Ç–∏–Ω–≥", "–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –º–æ—Ä—â–∏–Ω", "–û—á–∏—â–µ–Ω–∏–µ –ø–æ—Ä", "–í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Ç–æ–Ω–∞",
          "–°–µ–±–æ—Ä–µ–≥—É–ª—è—Ü–∏—è", "–ü—Ä–æ—Ç–∏–≤–æ–≤–æ—Å–ø–∞–ª–∏—Ç–µ–ª—å–Ω—ã–π", "–ê–Ω—Ç–∏–≤–æ–∑—Ä–∞—Å—Ç–Ω–æ–π", "–û—Å–≤–µ—Ç–ª–µ–Ω–∏–µ", "–†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è"]
SYMPTOMS = {
    '–ß—ë—Ä–Ω—ã–µ —Ç–æ—á–∫–∏': ['–ó–∞–∫—É–ø–æ—Ä–µ–Ω–Ω—ã–µ –ø–æ—Ä—ã', '–¢—ë–º–Ω—ã–µ —Ç–æ—á–∫–∏ –Ω–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –∫–æ–∂–∏', '–ù–µ—Ä–æ–≤–Ω–∞—è —Ç–µ–∫—Å—Ç—É—Ä–∞ –∫–æ–∂–∏', '–®–µ—Ä–æ—Ö–æ–≤–∞—Ç–æ—Å—Ç—å –ø—Ä–∏ –ø—Ä–∏–∫–æ—Å–Ω–æ–≤–µ–Ω–∏–∏'],
    '–ú–æ—Ä—â–∏–Ω—ã': ['–ú–µ–ª–∫–∏–µ –ª–∏–Ω–∏–∏ –∏ —Å–∫–ª–∞–¥–∫–∏', '–ü–æ—Ç–µ—Ä—è —É–ø—Ä—É–≥–æ—Å—Ç–∏', '"–ì—É—Å–∏–Ω—ã–µ –ª–∞–ø–∫–∏" –≤–æ–∫—Ä—É–≥ –≥–ª–∞–∑', '–ù–æ—Å–æ–≥—É–±–Ω—ã–µ —Å–∫–ª–∞–¥–∫–∏'],
    '–û–±–µ–∑–≤–æ–∂–µ–Ω–Ω–æ—Å—Ç—å': ['–ß—É–≤—Å—Ç–≤–æ —Å—Ç—è–Ω—É—Ç–æ—Å—Ç–∏', '–®–µ–ª—É—à–µ–Ω–∏–µ', '–¢—É—Å–∫–ª—ã–π —Ü–≤–µ—Ç –ª–∏—Ü–∞', '–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'],
    '–ñ–∏—Ä–Ω—ã–π –±–ª–µ—Å–∫': ["–ò–∑–ª–∏—à–Ω—è—è —Ä–∞–±–æ—Ç–∞ —Å–∞–ª—å–Ω—ã—Ö –∂–µ–ª—ë–∑", '–ë–ª–µ—Å—Ç—è—â–∞—è –∫–æ–∂–∞ –≤ –¢-–∑–æ–Ω–µ', '–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø–æ—Ä—ã', '–°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –∞–∫–Ω–µ']
}

BACKGROUND_IMAGE_PATH = os.path.join("assets", "beauty.jpg")

# ==================== –°–¢–ò–õ–ò ====================
def set_custom_style():
    st.markdown(
        f"""
        <style>
        .stApp {{
            background: linear-gradient(rgba(255, 245, 245, 0.9), rgba(255, 245, 245, 0.95)), 
                       url('data:image/jpg;base64,{image_to_base64(BACKGROUND_IMAGE_PATH)}');
            background-size: cover;
            background-position: center;
            background-attachment: fixed;
            color: #333333 !important;
            font-family: 'Arial', sans-serif;
        }}
        .block-container {{
            background-color: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 2rem;
            margin-bottom: 1rem;
            border: 1px solid #FF9999;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }}
        h1, h2, h3, h4, h5, h6 {{
            color: #2D3436 !important;
            font-weight: 600 !important;
        }}
        body, p, label, .stTextInput>label, .stSelectbox>label, 
        .stMultiselect>label, .stRadio>label, .stCheckbox>label {{
            color: #333333 !important;
            font-weight: 500 !important;
            font-size: 1.1em !important;
        }}
        .stTextInput>div>div>input {{
            background-color: #FFFFFF !important;
            border: 1px solid #FF9999 !important;
            border-radius: 10px !important;
            padding: 10px 15px !important;
            color: #333333 !important;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
        }}
        .stSelectbox>div>div, .stMultiSelect>div>div {{
            background-color: #FFFFFF !important;
            border: 1px solid #FF9999 !important;
            border-radius: 10px !important;
            color: #333333 !important;
        }}
        .stSelectbox>div>div>select, .stMultiSelect>div>div>ul {{
            background-color: #FFFFFF !important;
            color: #333333 !important;
        }}
        .stSelectbox>div>div>select>option, .stMultiSelect>div>div>ul>li {{
            background-color: #FFFFFF !important;
            color: #333333 !important;
        }}
        .stSelectbox>div>div>select>option:hover, .stMultiSelect>div>div>ul>li:hover {{
            background-color: #FF9999 !important;
            color: #FFFFFF !important;
        }}
        .stMultiSelect [data-baseweb="select"]>div {{
            background-color: #FFFFFF !important;
            color: #333333 !important;
        }}
        .stMultiSelect [data-baseweb="select"]>div>div {{
            background-color: #FFFFFF !important;
            color: #333333 !important;
        }}
        .stMultiSelect [data-baseweb="select"]>div>span {{
            color: #333333 !important;
        }}
        .stMultiSelect [data-baseweb="select"] ul {{
            background-color: #FFFFFF !important;
        }}
        .stMultiSelect [data-baseweb="select"] ul li {{
            background-color: #FFFFFF !important;
            color: #333333 !important;
        }}
        .stMultiSelect [data-baseweb="select"] ul li:hover {{
            background-color: #FF9999 !important;
            color: #FFFFFF !important;
        }}
        .stRadio>label {{
            color: #333333 !important;
            background-color: rgba(255, 255, 255, 0.9) !important;
            padding: 8px 12px !important;
            border-radius: 8px !important;
            margin-bottom: 8px !important;
        }}
        .stButton>button {{
            background-color: #6C5CE7 !important;
            color: white !important;
            border-radius: 12px !important;
            border: none !important;
            font-weight: 600 !important;
            padding: 12px 24px !important;
            transition: transform 0.2s ease-in-out;
        }}
        .stButton>button:hover {{
            transform: scale(1.05);
            background-color: #5A4BCE !important;
        }}
        .stDownloadButton>button {{
            background-color: #FF9999 !important;
            color: white !important;
            border-radius: 12px !important;
            border: none !important;
            font-weight: 600 !important;
            padding: 12px 24px !important;
            transition: transform 0.2s ease-in-out;
        }}
        .stDownloadButton>button:hover {{
            transform: scale(1.05);
            background-color: #FF8080 !important;
        }}
        .stProgress>div>div>div {{
            background-color: #FF9999 !important;
        }}
        .stForm {{
            background-color: transparent !important;
        }}
        </style>
        """,
        unsafe_allow_html=True
    )

def image_to_base64(image_path):
    try:
        with open(image_path, "rb") as img_file:
            return base64.b64encode(img_file.read()).decode('utf-8')
    except:
        return ""

# ==================== –ú–û–î–ï–õ–ò ====================
@st.cache_resource
def load_spacy_model():
    print("–ó–∞–≥—Ä—É–∂–∞–µ–º ru_core_news_sm...")
    nlp = spacy.load("ru_core_news_sm")
    print("ru_core_news_sm –∑–∞–≥—Ä—É–∂–µ–Ω")
    return nlp

@st.cache_resource
def load_model():
    try:
        os.makedirs("models", exist_ok=True)
        
        t5_folder = "models/ruT5"
        required_files = [
            "spiece.model", "training_args.bin", "tokenizer_config.json",
            "generation_config.json", "spiece.model.old", "config.json",
            "added_tokens.json", "special_tokens_map.json", "model.safetensors"
        ]
        all_files_present = all(os.path.exists(os.path.join(t5_folder, f)) for f in required_files)

        if not all_files_present:
            print("–°–∫–∞—á–∏–≤–∞–µ–º T5 –º–æ–¥–µ–ª—å...")
            t5_url = "https://drive.google.com/drive/folders/1_zIAEkqBeR8_yS6AyfIzjLNZpNtWULfW"
            gdown.download_folder(t5_url, output=t5_folder, quiet=False)
            print("T5 –º–æ–¥–µ–ª—å —Å–∫–∞—á–∞–Ω–∞")

        pkl_path = "models/best_models.pkl"
        if not os.path.exists(pkl_path):
            print("–°–∫–∞—á–∏–≤–∞–µ–º best_models.pkl...")
            pkl_url = "https://drive.google.com/uc?id=1SdvXJDBxrUS_d_Y0p5qlyU1Cw1ONc5wg"
            gdown.download(pkl_url, pkl_path, quiet=False)
            print("best_models.pkl —Å–∫–∞—á–∞–Ω")

        model = SkincareModel(model_path=t5_folder, pkl_path=pkl_path)
        model.load_model()
        print("SkincareModel —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–≥—Ä—É–∂–µ–Ω")
        return model
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
        return None

# ==================== –§–£–ù–ö–¶–ò–ò ====================
def symptoms_to_problems(symptoms):
    symptom_to_problem = {}
    for problem, symptom_list in SYMPTOMS.items():
        for symptom in symptom_list:
            symptom_to_problem[symptom] = problem
    return list(set(symptom_to_problem.get(s, "") for s in symptoms if s in symptom_to_problem))

def save_to_json(data):
    try:
        os.makedirs("user_data", exist_ok=True)
        filename = f"user_data/{st.session_state.session_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
        return False

# ==================== –ò–ù–¢–ï–†–§–ï–ô–° ====================
def init_session():
    if 'session_id' not in st.session_state:
        st.session_state.update({
            'session_id': str(uuid.uuid4()),
            'responses': {},
            'page': "questionnaire",
            'last_save': None
        })

def main_questionnaire():
    init_session()
    
    st.markdown("""
    <div style="text-align: center; margin-bottom: 2rem;">
        <h1 style="color: #2D3436;">–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥–±–æ—Ä —É—Ö–æ–¥–∞ üíñ</h1>
        <p style="color: #666666;">–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π</p>
    </div>
    """, unsafe_allow_html=True)

    with st.container():
        st.markdown("### –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ üë§")
        col1, col2 = st.columns(2)
        with col1:
            name = st.text_input(
                "–í–∞—à–µ –∏–º—è*",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è",
                key='name',
                help="–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–∞—à–µ –∏–º—è, —á—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ üíï"
            )
            if name:
                st.markdown(f"<p style='color: #FF9999; font-weight: 500;'>–ü—Ä–∏–≤–µ—Ç, {name}! –î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º —É—Ö–æ–¥ –¥–ª—è —Ç–µ–±—è! üíï</p>", unsafe_allow_html=True)
        with col2:
            age_range = st.selectbox(
                "–í–æ–∑—Ä–∞—Å—Ç–Ω–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω*",
                options=AGE_RANGES,
                index=None,
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç",
                key='age_range',
                help="–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å —É—Ö–æ–¥, –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ üåü"
            )

    with st.container():
        st.markdown("### –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–∂–∏ üå∏")
        col3, col4 = st.columns(2)
        with col3:
            skin_type = st.radio(
                "–¢–∏–ø –∫–æ–∂–∏*",
                options=SKIN_TYPES,
                index=None,
                key='skin_type',
                help="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫–æ–∂–∏, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ üß¥"
            )
        with col4:
            all_symptoms = [s for group in SYMPTOMS.values() for s in group]
            symptoms = st.multiselect(
                "–ë–µ—Å–ø–æ–∫–æ—è—â–∏–µ —Å–∏–º–ø—Ç–æ–º—ã*",
                options=all_symptoms,
                placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã...",
                key='symptoms',
                help="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–æ–º–æ—á—å üíñ"
            )
        
        effects = st.multiselect(
            "–û–∂–∏–¥–∞–µ–º—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã*",
            options=EFFECTS,
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã...",
            key='effects',
            help="–ö–∞–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å? ‚ú®"
        )

    if st.button(
        "–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", 
        type="primary", 
        use_container_width=True,
        key="main_button"
    ):
        required_fields = {
            'name': bool(name),
            'skin_type': skin_type in SKIN_TYPES[:3],
            'age_range': bool(age_range),
            'symptoms': len(symptoms) > 0,
            'effects': len(effects) > 0
        }
        
        if all(required_fields.values()):
            st.session_state.responses = {
                'name': name,
                'age_range': age_range,
                'skin_type': skin_type,
                'symptoms': symptoms,  # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                'effects': effects,    # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                'problem': ', '.join(symptoms_to_problems(symptoms))
            }
            if save_to_json(st.session_state.responses):
                st.session_state.page = "recommendations"
                st.success(f"–û—Ç–ª–∏—á–Ω–æ, {name}! –¢—ã –Ω–∞ –ø—É—Ç–∏ –∫ –∏–¥–µ–∞–ª—å–Ω–æ–π –∫–æ–∂–µ! ‚ú®")
                st.rerun()
        else:
            missing = [k for k, v in required_fields.items() if not v]
            st.error(f"–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {', '.join(missing)}")

def show_recommendations():
    st.markdown("""
    <div style="text-align: center; margin-bottom: 2rem;">
        <h1 style="color: #2D3436;">–í–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ üíñ</h1>
        <p style="color: #666666;">–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω —É—Ö–æ–¥–∞ –∑–∞ –∫–æ–∂–µ–π</p>
    </div>
    """, unsafe_allow_html=True)
    
    if 'responses' not in st.session_state:
        st.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É —Å–Ω–∞—á–∞–ª–∞.")
        st.stop()
    
    st.progress(100)
    st.markdown(f"<p style='text-align: center; color: #FF9999; font-weight: 500;'>–ì–æ—Ç–æ–≤–æ, {st.session_state.responses.get('name', '–î—Ä—É–≥')}!</p>", unsafe_allow_html=True)
    
    try:
        col1, col2 = st.columns([1, 2])
        with col1:
            image = Image.open(BACKGROUND_IMAGE_PATH)
            st.image(image, use_column_width=True)
        with col2:
            st.markdown("""
            <div style="padding: 1rem;">
                <h3>–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</h3>
                <p>–°–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É, –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å</p>
            </div>
            """, unsafe_allow_html=True)
    except Exception as e:
        st.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {str(e)}")
    
    model = load_model()
    if model is None:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
        return
    
    with st.spinner("–§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏..."):
        try:
            user_data = st.session_state.responses.copy()
            # –ü–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –µ—Å—Ç—å, Pipeline —Å–∞–º –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç
            recommendations = model.get_recommendations(user_data)
            st.session_state.recommendations = recommendations
            
            st.markdown("### –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å")
            st.markdown(f"""
            - **–ò–º—è:** {st.session_state.responses.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
            - **–í–æ–∑—Ä–∞—Å—Ç:** {st.session_state.responses.get('age_range', '–ù–µ —É–∫–∞–∑–∞–Ω')}
            - **–¢–∏–ø –∫–æ–∂–∏:** {st.session_state.responses.get('skin_type', '–ù–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω')}
            - **–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:** {list_to_text(st.session_state.responses.get('symptoms', [])) or '–ù–µ —É–∫–∞–∑–∞–Ω—ã'}
            """)
            
            if recommendations and 'daily_routine' in recommendations:
                st.markdown("### –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Ö–æ–¥—É")
                for item in recommendations['daily_routine']:
                    with st.expander(f"üí° {item.get('method', '–ú–µ—Ç–æ–¥')} - {item.get('type', '–¢–∏–ø')}", expanded=True):
                        st.markdown(f"""
                        - **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:** {item.get('instruction', '')}
                        - **–ü—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏—è:** {item.get('contraindications', '')}
                        - **–û–∂–∏–¥–∞–µ–º—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:** {item.get('expected_results', '')}
                        - **–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:** {item.get('effectiveness', '')}
                        - **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞:** {item.get('course_duration', '')} –¥–Ω–µ–π
                        """)
            else:
                st.info("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {str(e)}")
            return
    
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á—ë—Ç –≤ PDF", use_container_width=True):
        try:
            user_data = st.session_state.responses.copy()
            user_data['session_id'] = st.session_state.session_id
            pdf_path = generate_pdf_report(user_data, st.session_state.recommendations)
            with open(pdf_path, "rb") as f:
                pdf_data = f.read()
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å PDF",
                data=pdf_data,
                file_name=f"skincare_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.pdf",
                mime="application/pdf",
                use_container_width=True
            )
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {str(e)}")
    
    if st.button("–ù–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑", use_container_width=True):
        st.session_state.page = "questionnaire"
        st.rerun()

# ==================== –ó–ê–ü–£–°–ö ====================
if __name__ == "__main__":
    print("–ù–∞—á–∞–ª–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞")
    if not os.path.exists("assets"):
        os.makedirs("assets")
    
    set_custom_style()
    print("–°—Ç–∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    nlp = load_spacy_model()
    print("Spacy –∑–∞–≥—Ä—É–∂–µ–Ω")
    
    if st.session_state.get('page', 'questionnaire') == "questionnaire":
        main_questionnaire()
    else:
        show_recommendations()
    
    print("–ö–æ–Ω–µ—Ü –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–ª–æ–∫–∞")
    st.markdown("---")
    st.markdown(
        """
        <div style='text-align: center; color: #666666; padding: 1rem;'>
            <p style="font-size: 0.9em;">¬© 2025 Beauty Tracker | –°–æ–∑–¥–∞–Ω–æ —Å –∑–∞–±–æ—Ç–æ–π –¥–ª—è –≤–∞—à–µ–π –∫–æ–∂–∏ üå∏</p>
        </div>
        """,
        unsafe_allow_html=True
    )